// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using U3A.Database;

#nullable disable

namespace U3A.Database.Migrations.U3ADbContextSeedMigrations
{
    [DbContext(typeof(U3ADbContextSeed))]
    [Migration("20220813052441_U3A_Initial")]
    partial class U3A_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "5e99f08e-4555-4998-834b-24786d24fc9a",
                            Name = "Security Administrator",
                            NormalizedName = "SECURITY ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "993C6378-61D4-4734-ADAE-D725F2A8CD94",
                            ConcurrencyStamp = "286cf813-1bc6-4385-a545-cc6ee2de93f7",
                            Name = "System Administrator",
                            NormalizedName = "SYSTEM ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "68C1B727-5571-47F4-AAE8-8DC85AB3AEE0",
                            ConcurrencyStamp = "c31b46bb-928f-411c-9f18-c84f62106c1b",
                            Name = "Membership",
                            NormalizedName = "MEMBERSHIP"
                        },
                        new
                        {
                            Id = "D4BA57AA-A379-4EE8-940E-57315575978A",
                            ConcurrencyStamp = "7cf128ad-45a3-499b-bf25-ca21678ce6eb",
                            Name = "Accounting",
                            NormalizedName = "ACCOUNTING"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a953037d-7a28-4857-abd7-136ac482ff88",
                            Email = "SuperAdmin@U3A.com.au",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@U3A.COM.AU",
                            NormalizedUserName = "SUPERADMIN@U3A.COM.AU",
                            PasswordHash = "AQAAAAEAACcQAAAAEGO9hnvP8x8fJPlDhs2gGYMhl9koCigXL2PPHidC9luB5nbMxW8fCFahxG/ZCA1OSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d19a58d8-c599-4d04-b99b-06b42261f032",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin@U3A.com.au"
                        },
                        new
                        {
                            Id = "753F8F36-D2FF-438E-B5D1-7FF79E4628BD",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34905761-59fd-4408-a261-20dfeaacd7d1",
                            Email = "security@U3A.com.au",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECURITY@U3A.COM.AU",
                            NormalizedUserName = "SECURITY@U3A.COM.AU",
                            PasswordHash = "AQAAAAEAACcQAAAAEOe+NeYnOeM6CIUvG3rLuGXqrRsAWJ7BoXgKyvirFlq38T9v7lqCnEdkMEUOWSe+UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e02c8a0-ff0b-4b59-9126-385782db6632",
                            TwoFactorEnabled = false,
                            UserName = "security@U3A.com.au"
                        },
                        new
                        {
                            Id = "70494634-D7BE-4BE4-8106-031AAE2BC6DC",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "beb79513-2257-489f-9cb5-f008d61d55ee",
                            Email = "SysAdmin@U3A.com.au",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@U3A.COM.AU",
                            NormalizedUserName = "SYSADMIN@U3A.COM.AU",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ0s4p+MFiXURnb61SEH926OUy28Y5YrYqKjNCO/W5vSDTq1Ryd3Y5Cq9iotpROzfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "075e13aa-edb9-43ba-99b7-c248848faed3",
                            TwoFactorEnabled = false,
                            UserName = "SysAdmin@U3A.com.au"
                        },
                        new
                        {
                            Id = "E7B47704-8DA0-4657-B42C-849C1C22A6D2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eadf1573-36ec-4888-8f5e-bfe0564de98c",
                            Email = "accounts@U3A.com.au",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTS@U3A.COM.AU",
                            NormalizedUserName = "ACCOUNTS@U3A.COM.AU",
                            PasswordHash = "AQAAAAEAACcQAAAAEGI+D+snqXRY4uerus0kU6ypVzUHoLHJo7XNmQ0Iastb7pdBzCdt9zvnMUGVR3SeCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15645d31-2d90-4ad3-81a0-abfbefbfc555",
                            TwoFactorEnabled = false,
                            UserName = "accounts@U3A.com.au"
                        },
                        new
                        {
                            Id = "C5E9887D-9C4B-40F5-AB46-2232776005C5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a59d689a-6000-4448-9560-1677fdf03a7d",
                            Email = "membership@U3A.com.au",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBERSHIP@U3A.COM.AU",
                            NormalizedUserName = "MEMBERSHIP@U3A.COM.AU",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5rf+n4Z9u7Fzv9PENdLMBwEmNkHidubJciJdNwx/0P8Jpa3E7j591z1e0OKw++fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "912b7ae5-442b-4ff3-a276-b479d3f4f1d5",
                            TwoFactorEnabled = false,
                            UserName = "membership@U3A.com.au"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "993C6378-61D4-4734-ADAE-D725F2A8CD94"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "68C1B727-5571-47F4-AAE8-8DC85AB3AEE0"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "D4BA57AA-A379-4EE8-940E-57315575978A"
                        },
                        new
                        {
                            UserId = "70494634-D7BE-4BE4-8106-031AAE2BC6DC",
                            RoleId = "993C6378-61D4-4734-ADAE-D725F2A8CD94"
                        },
                        new
                        {
                            UserId = "E7B47704-8DA0-4657-B42C-849C1C22A6D2",
                            RoleId = "D4BA57AA-A379-4EE8-940E-57315575978A"
                        },
                        new
                        {
                            UserId = "C5E9887D-9C4B-40F5-AB46-2232776005C5",
                            RoleId = "68C1B727-5571-47F4-AAE8-8DC85AB3AEE0"
                        },
                        new
                        {
                            UserId = "753F8F36-D2FF-438E-B5D1-7FF79E4628BD",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("U3A.Model.AttendClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendClassStatusID")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdHoc")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AttendClassStatusID");

                    b.HasIndex("ClassID");

                    b.HasIndex("PersonID");

                    b.HasIndex("TermID", "ClassID", "Date");

                    b.ToTable("AttendClass");
                });

            modelBuilder.Entity("U3A.Model.AttendClassStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AttendClassStatus");

                    b.HasData(
                        new
                        {
                            ID = 0,
                            Status = "Present"
                        },
                        new
                        {
                            ID = 1,
                            Status = "Absent without apology"
                        },
                        new
                        {
                            ID = 2,
                            Status = "Absent with apology"
                        });
                });

            modelBuilder.Entity("U3A.Model.CancelClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.ToTable("CancelClass");
                });

            modelBuilder.Entity("U3A.Model.Class", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OccurrenceID")
                        .HasColumnType("int");

                    b.Property<bool>("OfferedTerm1")
                        .HasColumnType("bit")
                        .HasComment("Is the course offered in term 1?");

                    b.Property<bool>("OfferedTerm2")
                        .HasColumnType("bit")
                        .HasComment("Is the course offered in term 2?");

                    b.Property<bool>("OfferedTerm3")
                        .HasColumnType("bit")
                        .HasComment("Is the course offered in term 3?");

                    b.Property<bool>("OfferedTerm4")
                        .HasColumnType("bit")
                        .HasComment("Is the course offered in term 4?");

                    b.Property<int>("OnDayID")
                        .HasColumnType("int");

                    b.Property<int?>("Recurrence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VenueID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("LeaderID");

                    b.HasIndex("OccurrenceID");

                    b.HasIndex("OnDayID");

                    b.HasIndex("VenueID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("U3A.Model.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClassFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Optional fee per class (eg. tea and coffee)");

                    b.Property<string>("ClassFeeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversionID")
                        .HasColumnType("int");

                    b.Property<decimal>("CourseFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Once-only course enrolment fee");

                    b.Property<string>("CourseFeeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseParticipationTypeID")
                        .HasColumnType("int");

                    b.Property<Guid?>("CourseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<decimal>("Duration")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The time in hours each class is expeted to take");

                    b.Property<int>("MaximumStudents")
                        .HasColumnType("int")
                        .HasComment("The maximum number of students per class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequiredStudents")
                        .HasColumnType("int")
                        .HasComment("The required number of students per class");

                    b.HasKey("ID");

                    b.HasIndex("CourseParticipationTypeID");

                    b.HasIndex("CourseTypeID");

                    b.HasIndex("Discontinued", "Name");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("U3A.Model.CourseParticipationType", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CourseParticpationType");

                    b.HasData(
                        new
                        {
                            ID = 0,
                            Name = "Same participants in all classes"
                        },
                        new
                        {
                            ID = 1,
                            Name = "Different participants in each class"
                        });
                });

            modelBuilder.Entity("U3A.Model.CourseType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CourseType");
                });

            modelBuilder.Entity("U3A.Model.Enrolment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWaitlisted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("CourseID");

                    b.HasIndex("PersonID");

                    b.HasIndex("TermID");

                    b.ToTable("Enrolment");
                });

            modelBuilder.Entity("U3A.Model.Occurrence", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Occurrence");

                    b.HasData(
                        new
                        {
                            ID = 0,
                            Name = "Once Only",
                            ShortName = "Once"
                        },
                        new
                        {
                            ID = 1,
                            Name = "Daily",
                            ShortName = "Daily"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Weekly",
                            ShortName = "Weekly"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Fortnightly",
                            ShortName = "F'nightly"
                        },
                        new
                        {
                            ID = 4,
                            Name = "1st Week of Month",
                            ShortName = "Week 1"
                        },
                        new
                        {
                            ID = 5,
                            Name = "2nd Week of Month",
                            ShortName = "Week 2"
                        },
                        new
                        {
                            ID = 6,
                            Name = "3rd Week of Month",
                            ShortName = "Week 3"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Last Week of Month",
                            ShortName = "Last Week"
                        });
                });

            modelBuilder.Entity("U3A.Model.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConversionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCeased")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ICEContact")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ICEPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsLifeMember")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"), 1L, 1);

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("VaxCertificateViewed")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("Discontinued", "LastName", "FirstName", "Email");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("U3A.Model.PublicHoliday", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PublicHoliday");
                });

            modelBuilder.Entity("U3A.Model.SystemSettings", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ABN")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("CurrentTermID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("MailSurcharge")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Yearly surcharge if requiring mail correspondance");

                    b.Property<decimal>("MembershipFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Yearly Membership Fee");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("RequireVaxCertificate")
                        .HasColumnType("bit");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("U3AGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ID");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("U3A.Model.Term", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("The number of weeks a Term will last");

                    b.Property<int>("EnrolmentEnds")
                        .HasColumnType("int")
                        .HasComment("The number of weeks prior to StartDate that enrolment ends");

                    b.Property<int>("EnrolmentStarts")
                        .HasColumnType("int")
                        .HasComment("The number of weeks prior to StartDate that enrolment begins");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("U3A.Model.Venue", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("U3A.Model.WeekDay", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WeekDay");

                    b.HasData(
                        new
                        {
                            ID = 0,
                            Day = "Sunday",
                            ShortDay = "Sun"
                        },
                        new
                        {
                            ID = 1,
                            Day = "Monday",
                            ShortDay = "Mon"
                        },
                        new
                        {
                            ID = 2,
                            Day = "Tuesday",
                            ShortDay = "Tue"
                        },
                        new
                        {
                            ID = 3,
                            Day = "Wednesday",
                            ShortDay = "Wed"
                        },
                        new
                        {
                            ID = 4,
                            Day = "Thursday",
                            ShortDay = "Thu"
                        },
                        new
                        {
                            ID = 5,
                            Day = "Friday",
                            ShortDay = "Fri"
                        },
                        new
                        {
                            ID = 6,
                            Day = "Saturday",
                            ShortDay = "Sat"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("U3A.Model.AttendClass", b =>
                {
                    b.HasOne("U3A.Model.AttendClassStatus", "AttendClassStatus")
                        .WithMany()
                        .HasForeignKey("AttendClassStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID");

                    b.HasOne("U3A.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendClassStatus");

                    b.Navigation("Class");

                    b.Navigation("Person");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("U3A.Model.CancelClass", b =>
                {
                    b.HasOne("U3A.Model.Class", "Class")
                        .WithMany("CancelledClasses")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("U3A.Model.Class", b =>
                {
                    b.HasOne("U3A.Model.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Person", "Leader")
                        .WithMany("LeaderOf")
                        .HasForeignKey("LeaderID");

                    b.HasOne("U3A.Model.Occurrence", "Occurrence")
                        .WithMany()
                        .HasForeignKey("OccurrenceID");

                    b.HasOne("U3A.Model.WeekDay", "OnDay")
                        .WithMany("Classes")
                        .HasForeignKey("OnDayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Venue", "Venue")
                        .WithMany("Classes")
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Leader");

                    b.Navigation("Occurrence");

                    b.Navigation("OnDay");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("U3A.Model.Course", b =>
                {
                    b.HasOne("U3A.Model.CourseParticipationType", "CourseParticipationType")
                        .WithMany()
                        .HasForeignKey("CourseParticipationTypeID");

                    b.HasOne("U3A.Model.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeID");

                    b.Navigation("CourseParticipationType");

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("U3A.Model.Enrolment", b =>
                {
                    b.HasOne("U3A.Model.Class", "Class")
                        .WithMany("Enrolments")
                        .HasForeignKey("ClassID");

                    b.HasOne("U3A.Model.Course", "Course")
                        .WithMany("Enrolments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Person", "Person")
                        .WithMany("Enrolments")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("U3A.Model.Term", "Term")
                        .WithMany("Enrolments")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("Person");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("U3A.Model.Class", b =>
                {
                    b.Navigation("CancelledClasses");

                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("U3A.Model.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("U3A.Model.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("U3A.Model.Person", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("LeaderOf");
                });

            modelBuilder.Entity("U3A.Model.Term", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("U3A.Model.Venue", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("U3A.Model.WeekDay", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
