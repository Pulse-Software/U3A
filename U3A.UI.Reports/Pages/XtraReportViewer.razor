@page "/XtraReportViewer"
@page "/XtraReportViewer/{ReportName?}"

@inject TenantInfoEx tenantInfo
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@using DevExpress.XtraReports.Services
@using DevExpress.XtraPrinting.Caching;
@using DevExpress.XtraReports.UI;
@using DevExpress.Blazor.Reporting.EditingFields;
@using DevExpress.XtraReports.Web.Native.ClientControls;


@attribute [Authorize]

@using DevExpress.Blazor.Reporting
@using Microsoft.Extensions.DependencyInjection

<DxReportViewer @ref="reportViewer"
                Report="@Report" SizeMode="SizeMode.Small"                
                SinglePagePreview="false"
                RootCssClasses="w-100 h-100" />

@code {
    DxReportViewer? reportViewer;
    [Inject] public EditingFieldModelFactory EditingFieldModelFactory { get; set; }
    [Parameter]
    public string ReportName { get; set; }
    XtraReport? Report { get; set; }
    U3ADbContext dbc { get; set; }


    protected override async Task OnInitializedAsync() {
        dbc = await U3Adbfactory.CreateDbContextAsync();
    }

    protected override Task OnParametersSetAsync() {
        Type? thisType = Type.GetType($"U3A.UI.Reports.{ReportName}");
        if (thisType != null) {
            Report = (XtraReport?)Activator.CreateInstance(thisType);
            if (Report is IXtraReportWithDbContext || Report is IXtraReportWithDbContextFactory) {
                if (Report is IXtraReportWithDbContext)
                {
                    (Report as IXtraReportWithDbContext).DbContext = dbc;
                }
                if (Report is IXtraReportWithDbContextFactory)
                {
                    (Report as IXtraReportWithDbContextFactory).U3Adbfactory = U3Adbfactory;
                }
            }
            else
            {
                if (Report.DataSource is EFDataSource)
                {
                    (Report.DataSource as EFDataSource).ConnectionParameters.ConnectionString = dbc.TenantInfo.ConnectionString;
                }
            }
        }
        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            EditingFieldModelFactory.RegisterMaskEditor("Name", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z -.]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z]+" });
            EditingFieldModelFactory.RegisterMaskEditor("NumbersAndUppercaseLatinLetters", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9]+" });
            EditingFieldModelFactory.RegisterMaskEditor("UppercaseText", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[A-Z0-9 ,-/]+" });
            EditingFieldModelFactory.RegisterMaskEditor("Day", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|([1-2][0-9])|(3[0-1])" });
            EditingFieldModelFactory.RegisterMaskEditor("Month", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"(0[1-9])|(1[0-2])" });
            EditingFieldModelFactory.RegisterMaskEditor("Year", new MaskEditorOptions() { MaskMode = MaskMode.RegEx, Mask = @"[0-2]([0-9]{3})" });
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose() {
        dbc?.Dispose();
    }

}