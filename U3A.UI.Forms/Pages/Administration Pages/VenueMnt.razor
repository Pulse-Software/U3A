@page "/VenueMnt"

@inject IJSRuntime js
@inject IDbContextFactory<U3ADbContext> U3Adbfactory
@implements IDisposable

@attribute [Authorize]

@if (!IsReady) {
    <p><em>Loading...</em></p>
}
else {

    <div class="row  align-content-start">
        <h3>Venues</h3>
    </div>
    <div class="row">
        <div class="col-11  d-none d-md-inline">
            Venues identify the location in which courses and/or activities offered to students are held.
        </div>

    </div>
    <br />

    <MessageBox @ref="@messageBox" />

    <ErrorPopup @ref="@ErrorPopup" PopupHeader="@ErrorHeader" PopupMessage="@ErrorMessage" />

    <GridToolbar @ref="Toolbar" LinkedGrid=@mainGrid />

    <DxGrid Data="@Venues" @ref=@mainGrid CssClass="h-75"
        ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
        ShowFilterRow="false"
        ShowAllRows="true"
        KeyFieldName="ID"
        ValidationEnabled="true"
        EditMode="GridEditMode.PopupEditForm"
        EditModelSaving="Grid_EditModelSaving"
        SelectedDataItemsChanged="Grid_SelectedDataItemsChanged"
        CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText">
        <Columns>
            <DxGridCommandColumnEx @ref="GridCommandColumn" Width="60px" EditButtonVisible="true" DeleteButtonVisible="false" />
            <DxGridDataColumn Width="6rem" Caption="Discontinued" FieldName="Discontinued">
                <CellDisplayTemplate>
                    <DxCheckBox Enabled="false" Checked="(bool)context.Value" />
                </CellDisplayTemplate>
                <FilterRowCellTemplate>
                    <DxCheckBox Checked="(bool?)context.FilterRowValue"
                            CheckedChanged="(bool? v) => context.FilterRowValue = v"
                            AllowIndeterminateStateByClick="true"
                            Alignment="CheckBoxContentAlignment.Center" />
                </FilterRowCellTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn Caption="Name" FieldName="Name" />
            <DxGridDataColumn Caption="Address" FieldName="Address" />
            <DxGridDataColumn Caption="Contact" FieldName="Coordinator" />
            <DxGridDataColumn Caption="Email" FieldName="Email" />
            <DxGridDataColumn Caption="Phone" FieldName="Phone" />
        </Columns>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Custom" Name="Custom" FieldName="Discontinued" />
        </TotalSummary>

        <EditFormTemplate Context="EditFormContext">
            @{
                var editItem = (Venue)EditFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <ValidationSummary />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Venue" ColSpanMd="12">
                    <DxTextBox @bind-Text="@editItem.Name" InputId="Venue-Name" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Venue Address" ColSpanMd="12">
                    <DxTextBox @bind-Text="@editItem.Address" />
                </DxFormLayoutItem>
                <DxFormLayoutGroup Caption="Contact Details">
                    <DxFormLayoutItem Caption="Name" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.Coordinator" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Email" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.Email" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Phone" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.Phone" />
                    </DxFormLayoutItem>
                </DxFormLayoutGroup>
                <DxFormLayoutGroup Caption="Access">
                    <DxFormLayoutItem Caption="Key Code" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.KeyCode" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Details" ColSpanMd="12">
                        <DxTextBox @bind-Text="@editItem.AccessDetail" />
                    </DxFormLayoutItem>
                </DxFormLayoutGroup>
                <DxFormLayoutItem Caption="Equipment Available" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                    <DxMemo @bind-Text="@editItem.Equipment" Rows="3" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Comment" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                    <DxMemo @bind-Text="@editItem.Comment" Rows="5" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Discontinued">
                    <DxCheckBox @bind-Checked="@editItem.Discontinued" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>


}


@code {
    bool IsReady;
    private List<Venue> Venues { get; set; }
    private DxGridCommandColumnEx? GridCommandColumn;
    MessageBox messageBox;

    internal IGrid? mainGrid { get; set; }
    internal ErrorPopup? ErrorPopup { get; set; }
    internal GridToolbar? Toolbar;
    internal string ErrorHeader;
    internal string ErrorMessage;
    U3ADbContext dbc { get; set; }

    protected override async Task OnInitializedAsync() {
        // wire up the data
        dbc = await U3Adbfactory.CreateDbContextAsync();
        await RefreshData();
        IsReady = true;
    }

    async Task RefreshData() {
        Venues = await BusinessRule.EditableVenuesAsync(dbc);
    }

    protected override void OnAfterRender(bool firstRender) {
        // wire up the toolbar
        base.OnAfterRender(firstRender);
        if (Toolbar != null && mainGrid != null) { Toolbar.LinkedGrid = mainGrid; }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        var editModel = (Venue)e.EditModel;
        if (!await IsDataOk(editModel)) { e.Cancel = true; return; }
        // Re-query a data item from the store.
        var dataItem = e.IsNew ? new Venue() : dbc.Venue.Find(editModel.ID);
        // Assign changes from the edit model to the data item.
        if (dataItem != null) {
            editModel.CopyTo(dataItem);
            try {
                // Post changes to the database.
                if (e.IsNew) await dbc.AddAsync(dataItem);
                await dbc.SaveChangesAsync();
                // update the Grid.
                if (e.IsNew) {
                    Venues.Insert(0, dataItem);
                }
                else {
                    int idx = Venues.FindIndex(x => x.ID == dataItem.ID);
                    Venues[idx] = dataItem;
                }
            }
            catch (Exception ex) {
                ErrorHeader = "Save to database error";
                ErrorMessage = Helpers.GetErrorMessage(ex);
                await ErrorPopup.ShowPopupAsync();
                dbc?.ChangeTracker?.Clear();
                e.Cancel = true;
            }
        }
    }

    async Task<bool> IsDataOk(Venue editItem) {
        bool result = true;
        var dup = await BusinessRule.DuplicateMarkUpAsync(dbc, editItem);
        if (!string.IsNullOrWhiteSpace(dup)) {
            await messageBox.ShowOkOnlyAsync("Duplicate Record", dup);
            result = false;
        }
        return result;
    }


    async void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e) {
        if (e.Item.Name == "Custom") {
            int count = Venues is null ? 0 : Venues.Where(x => !x.Discontinued).Count();
            e.DisplayText = $"Active: {count}";
        }
    }

    void Grid_SelectedDataItemsChanged() {
        mainGrid.RefreshSummary();
    }

    public void Dispose() {
        dbc?.Dispose();
    }

}
